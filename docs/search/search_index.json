{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"jetblack-serialization \u00b6 Serialization for JSON and XML in Python using typing annotations. Status \u00b6 It has been tested with Python 3.7 used the typing_extensions package for TypedDict and Annotated . In Python 3.8 the TypedDict class is available in the standard typing package.","title":"jetblack-serialization"},{"location":"#jetblack-serialization","text":"Serialization for JSON and XML in Python using typing annotations.","title":"jetblack-serialization"},{"location":"#status","text":"It has been tested with Python 3.7 used the typing_extensions package for TypedDict and Annotated . In Python 3.8 the TypedDict class is available in the standard typing package.","title":"Status"},{"location":"api/jetblack_serialization.iso_8601/","text":"jetblack_serialization \u00b6 module jetblack_serialization.iso_8601 \u00b6 Summary \u00b6 ISO 8601 Description \u00b6 Utilities for converting dates and durations to and from ISO 8601 format. function jetblack_serialization.iso_8601 . datetime_to_iso_8601 \u00b6 Summary \u00b6 Convert datetime to ISO 8601 jetblack_serialization.iso_8601 . datetime_to_iso_8601 ( timestamp : datetime ) -> str Parameters \u00b6 timestamp : datetime The timestamp Returns \u00b6 str : The stringified ISO 8601 version of the timestamp function jetblack_serialization.iso_8601 . iso_8601_to_datetime \u00b6 Summary \u00b6 Parse an ISO 8601 datetime jetblack_serialization.iso_8601 . iso_8601_to_datetime ( value : str ) -> Optional[datetime] Parameters \u00b6 value : str The ISO 8601 date string Returns \u00b6 Optional[datetime] : A timestamp function jetblack_serialization.iso_8601 . iso_8601_to_timedelta \u00b6 Summary \u00b6 Convert an ISO 8601 duration to a timedelta jetblack_serialization.iso_8601 . iso_8601_to_timedelta ( duration : str ) -> Optional[timedelta] Parameters \u00b6 duration : str An ISO 8601 format duration Returns \u00b6 Optional[timedelta] : The duration as a timedelta function jetblack_serialization.iso_8601 . timedelta_to_iso_8601 \u00b6 Summary \u00b6 Convert a timedelta to an ISO 8601 duration string Description \u00b6 Prefers weeks to days, so a roundtrip of P7D becomes P1W. Also an zero value is removed. A zero duration becomes P0D. jetblack_serialization.iso_8601 . timedelta_to_iso_8601 ( value : timedelta ) -> str Parameters \u00b6 value : timedelta A timedelta Returns \u00b6 str : The ISO 8601 duration representation of the timedelta.","title":"jetblack_serialization.iso_8601"},{"location":"api/jetblack_serialization.iso_8601/#jetblack_serialization","text":"","title":"jetblack_serialization"},{"location":"api/jetblack_serialization.iso_8601/#module-jetblack_serializationiso_8601","text":"","title":"module jetblack_serialization.iso_8601"},{"location":"api/jetblack_serialization.iso_8601/#summary","text":"ISO 8601","title":"Summary"},{"location":"api/jetblack_serialization.iso_8601/#description","text":"Utilities for converting dates and durations to and from ISO 8601 format.","title":"Description"},{"location":"api/jetblack_serialization.iso_8601/#function-jetblack_serializationiso_8601datetime_to_iso_8601","text":"","title":"function jetblack_serialization.iso_8601.datetime_to_iso_8601"},{"location":"api/jetblack_serialization.iso_8601/#summary_1","text":"Convert datetime to ISO 8601 jetblack_serialization.iso_8601 . datetime_to_iso_8601 ( timestamp : datetime ) -> str","title":"Summary"},{"location":"api/jetblack_serialization.iso_8601/#parameters","text":"timestamp : datetime The timestamp","title":"Parameters"},{"location":"api/jetblack_serialization.iso_8601/#returns","text":"str : The stringified ISO 8601 version of the timestamp","title":"Returns"},{"location":"api/jetblack_serialization.iso_8601/#function-jetblack_serializationiso_8601iso_8601_to_datetime","text":"","title":"function jetblack_serialization.iso_8601.iso_8601_to_datetime"},{"location":"api/jetblack_serialization.iso_8601/#summary_2","text":"Parse an ISO 8601 datetime jetblack_serialization.iso_8601 . iso_8601_to_datetime ( value : str ) -> Optional[datetime]","title":"Summary"},{"location":"api/jetblack_serialization.iso_8601/#parameters_1","text":"value : str The ISO 8601 date string","title":"Parameters"},{"location":"api/jetblack_serialization.iso_8601/#returns_1","text":"Optional[datetime] : A timestamp","title":"Returns"},{"location":"api/jetblack_serialization.iso_8601/#function-jetblack_serializationiso_8601iso_8601_to_timedelta","text":"","title":"function jetblack_serialization.iso_8601.iso_8601_to_timedelta"},{"location":"api/jetblack_serialization.iso_8601/#summary_3","text":"Convert an ISO 8601 duration to a timedelta jetblack_serialization.iso_8601 . iso_8601_to_timedelta ( duration : str ) -> Optional[timedelta]","title":"Summary"},{"location":"api/jetblack_serialization.iso_8601/#parameters_2","text":"duration : str An ISO 8601 format duration","title":"Parameters"},{"location":"api/jetblack_serialization.iso_8601/#returns_2","text":"Optional[timedelta] : The duration as a timedelta","title":"Returns"},{"location":"api/jetblack_serialization.iso_8601/#function-jetblack_serializationiso_8601timedelta_to_iso_8601","text":"","title":"function jetblack_serialization.iso_8601.timedelta_to_iso_8601"},{"location":"api/jetblack_serialization.iso_8601/#summary_4","text":"Convert a timedelta to an ISO 8601 duration string","title":"Summary"},{"location":"api/jetblack_serialization.iso_8601/#description_1","text":"Prefers weeks to days, so a roundtrip of P7D becomes P1W. Also an zero value is removed. A zero duration becomes P0D. jetblack_serialization.iso_8601 . timedelta_to_iso_8601 ( value : timedelta ) -> str","title":"Description"},{"location":"api/jetblack_serialization.iso_8601/#parameters_3","text":"value : timedelta A timedelta","title":"Parameters"},{"location":"api/jetblack_serialization.iso_8601/#returns_3","text":"str : The ISO 8601 duration representation of the timedelta.","title":"Returns"},{"location":"api/jetblack_serialization.json/","text":"jetblack_serialization \u00b6 module jetblack_serialization.json \u00b6 Summary \u00b6 JSON Serialization function jetblack_serialization.json . deserialize \u00b6 Summary \u00b6 Convert JSON to an object jetblack_serialization.json . deserialize ( text : str , annotation : Annotation , config : SerializerConfig ) -> Any Parameters \u00b6 text : str The JSON string annotation : Annotation The type annotation config : SerializerConfig The serializer configuration Returns \u00b6 Any : The deserialized object. function jetblack_serialization.json . from_json_value \u00b6 Summary \u00b6 Convert from a json value jetblack_serialization.json . from_json_value ( config : SerializerConfig , json_value : Any , annotation : Annotation ) -> Any Parameters \u00b6 config : SerializerConfig The serialier configuration json_value : Any The JSON value annotation : Annotation The type annotation Returns \u00b6 Any : The deserialized value function jetblack_serialization.json . serialize \u00b6 Summary \u00b6 Convert the object to JSON jetblack_serialization.json . serialize ( obj : Any , annotation : Annotation , config : SerializerConfig ) -> str Parameters \u00b6 obj : Any The object to convert annotation : Annotation The type annotation config : SerializerConfig The serializer configuration Returns \u00b6 str : The serialized object class JSONProperty ( JSONAnnotation ) \u00b6 Summary \u00b6 A JSON property jetblack_serialization.json . JSONProperty ( tag : str ) -> None Parameters \u00b6 tag : str class JSONValue ( JSONAnnotation ) \u00b6 Summary \u00b6 A JSON property jetblack_serialization.json . JSONValue ( ) -> None","title":"jetblack_serialization.json"},{"location":"api/jetblack_serialization.json/#jetblack_serialization","text":"","title":"jetblack_serialization"},{"location":"api/jetblack_serialization.json/#module-jetblack_serializationjson","text":"","title":"module jetblack_serialization.json"},{"location":"api/jetblack_serialization.json/#summary","text":"JSON Serialization","title":"Summary"},{"location":"api/jetblack_serialization.json/#function-jetblack_serializationjsondeserialize","text":"","title":"function jetblack_serialization.json.deserialize"},{"location":"api/jetblack_serialization.json/#summary_1","text":"Convert JSON to an object jetblack_serialization.json . deserialize ( text : str , annotation : Annotation , config : SerializerConfig ) -> Any","title":"Summary"},{"location":"api/jetblack_serialization.json/#parameters","text":"text : str The JSON string annotation : Annotation The type annotation config : SerializerConfig The serializer configuration","title":"Parameters"},{"location":"api/jetblack_serialization.json/#returns","text":"Any : The deserialized object.","title":"Returns"},{"location":"api/jetblack_serialization.json/#function-jetblack_serializationjsonfrom_json_value","text":"","title":"function jetblack_serialization.json.from_json_value"},{"location":"api/jetblack_serialization.json/#summary_2","text":"Convert from a json value jetblack_serialization.json . from_json_value ( config : SerializerConfig , json_value : Any , annotation : Annotation ) -> Any","title":"Summary"},{"location":"api/jetblack_serialization.json/#parameters_1","text":"config : SerializerConfig The serialier configuration json_value : Any The JSON value annotation : Annotation The type annotation","title":"Parameters"},{"location":"api/jetblack_serialization.json/#returns_1","text":"Any : The deserialized value","title":"Returns"},{"location":"api/jetblack_serialization.json/#function-jetblack_serializationjsonserialize","text":"","title":"function jetblack_serialization.json.serialize"},{"location":"api/jetblack_serialization.json/#summary_3","text":"Convert the object to JSON jetblack_serialization.json . serialize ( obj : Any , annotation : Annotation , config : SerializerConfig ) -> str","title":"Summary"},{"location":"api/jetblack_serialization.json/#parameters_2","text":"obj : Any The object to convert annotation : Annotation The type annotation config : SerializerConfig The serializer configuration","title":"Parameters"},{"location":"api/jetblack_serialization.json/#returns_2","text":"str : The serialized object","title":"Returns"},{"location":"api/jetblack_serialization.json/#class-jsonpropertyjsonannotation","text":"","title":"class JSONProperty(JSONAnnotation)"},{"location":"api/jetblack_serialization.json/#summary_4","text":"A JSON property jetblack_serialization.json . JSONProperty ( tag : str ) -> None","title":"Summary"},{"location":"api/jetblack_serialization.json/#parameters_3","text":"tag : str","title":"Parameters"},{"location":"api/jetblack_serialization.json/#class-jsonvaluejsonannotation","text":"","title":"class JSONValue(JSONAnnotation)"},{"location":"api/jetblack_serialization.json/#summary_5","text":"A JSON property jetblack_serialization.json . JSONValue ( ) -> None","title":"Summary"},{"location":"api/jetblack_serialization.xml/","text":"jetblack_serialization \u00b6 module jetblack_serialization.xml \u00b6 Summary \u00b6 XML Serialization function jetblack_serialization.xml . deserialize \u00b6 Summary \u00b6 Convert XML to an object jetblack_serialization.xml . deserialize ( text : str , annotation : str , config : SerializerConfig ) -> Any Parameters \u00b6 text : str The XML string annotation : str The type annotation config : SerializerConfig Returns \u00b6 Any : The deserialized object. function jetblack_serialization.xml . serialize \u00b6 jetblack_serialization.xml . serialize ( obj : Any , annotation : Any , config : SerializerConfig ) -> str Parameters \u00b6 obj : Any annotation : Any config : SerializerConfig Returns \u00b6 str : class XMLAttribute ( XMLAnnotation ) \u00b6 Summary \u00b6 An XML attribute jetblack_serialization.xml . XMLAttribute ( tag : str ) -> None Parameters \u00b6 tag : str class XMLEntity ( XMLAnnotation ) \u00b6 Summary \u00b6 An XML entity jetblack_serialization.xml . XMLEntity ( tag : str ) -> None Parameters \u00b6 tag : str","title":"jetblack_serialization.xml"},{"location":"api/jetblack_serialization.xml/#jetblack_serialization","text":"","title":"jetblack_serialization"},{"location":"api/jetblack_serialization.xml/#module-jetblack_serializationxml","text":"","title":"module jetblack_serialization.xml"},{"location":"api/jetblack_serialization.xml/#summary","text":"XML Serialization","title":"Summary"},{"location":"api/jetblack_serialization.xml/#function-jetblack_serializationxmldeserialize","text":"","title":"function jetblack_serialization.xml.deserialize"},{"location":"api/jetblack_serialization.xml/#summary_1","text":"Convert XML to an object jetblack_serialization.xml . deserialize ( text : str , annotation : str , config : SerializerConfig ) -> Any","title":"Summary"},{"location":"api/jetblack_serialization.xml/#parameters","text":"text : str The XML string annotation : str The type annotation config : SerializerConfig","title":"Parameters"},{"location":"api/jetblack_serialization.xml/#returns","text":"Any : The deserialized object.","title":"Returns"},{"location":"api/jetblack_serialization.xml/#function-jetblack_serializationxmlserialize","text":"jetblack_serialization.xml . serialize ( obj : Any , annotation : Any , config : SerializerConfig ) -> str","title":"function jetblack_serialization.xml.serialize"},{"location":"api/jetblack_serialization.xml/#parameters_1","text":"obj : Any annotation : Any config : SerializerConfig","title":"Parameters"},{"location":"api/jetblack_serialization.xml/#returns_1","text":"str :","title":"Returns"},{"location":"api/jetblack_serialization.xml/#class-xmlattributexmlannotation","text":"","title":"class XMLAttribute(XMLAnnotation)"},{"location":"api/jetblack_serialization.xml/#summary_2","text":"An XML attribute jetblack_serialization.xml . XMLAttribute ( tag : str ) -> None","title":"Summary"},{"location":"api/jetblack_serialization.xml/#parameters_2","text":"tag : str","title":"Parameters"},{"location":"api/jetblack_serialization.xml/#class-xmlentityxmlannotation","text":"","title":"class XMLEntity(XMLAnnotation)"},{"location":"api/jetblack_serialization.xml/#summary_3","text":"An XML entity jetblack_serialization.xml . XMLEntity ( tag : str ) -> None","title":"Summary"},{"location":"api/jetblack_serialization.xml/#parameters_3","text":"tag : str","title":"Parameters"},{"location":"user-guide/defaults/","text":"Defaults \u00b6 There is a DefaultValue annotation. This can be used in conjunction with the othe annotations. For example: from datetime import datetime from typing import List , Optional , TypedDict , Union , Annotated from jetblack_serialization import DefaultValue class Book ( TypedDict , total = False ): book_id : int title : str author : str publication_date : datetime keywords : List [ str ] phrases : List [ str ] age : Optional [ Union [ datetime , int ]] pages : Annnotated [ Optional [ int ], DefaultValue ( 1 )]","title":"Defaults"},{"location":"user-guide/defaults/#defaults","text":"There is a DefaultValue annotation. This can be used in conjunction with the othe annotations. For example: from datetime import datetime from typing import List , Optional , TypedDict , Union , Annotated from jetblack_serialization import DefaultValue class Book ( TypedDict , total = False ): book_id : int title : str author : str publication_date : datetime keywords : List [ str ] phrases : List [ str ] age : Optional [ Union [ datetime , int ]] pages : Annnotated [ Optional [ int ], DefaultValue ( 1 )]","title":"Defaults"},{"location":"user-guide/installation/","text":"Installation \u00b6 The package can be installed with pip. pip install jetblack-serialization This is a Python 3.7+ package. It has dependencies on the following packages: lxml typing-extensions typing_inspect","title":"Installation"},{"location":"user-guide/installation/#installation","text":"The package can be installed with pip. pip install jetblack-serialization This is a Python 3.7+ package. It has dependencies on the following packages: lxml typing-extensions typing_inspect","title":"Installation"},{"location":"user-guide/json/","text":"Serializing JSON \u00b6 Given a typed dictionary: from datetime import datetime from typing import List , Optional , TypedDict , Union class Book ( TypedDict , total = False ): book_id : int title : str author : str publication_date : datetime keywords : List [ str ] phrases : List [ str ] age : Optional [ Union [ datetime , int ]] pages : Optional [ int ] Create some data: obj : Book = { 'author' : 'Chairman Mao' , 'book_id' : 42 , 'title' : 'Little Red Book' , 'publication_date' : datetime ( 1973 , 1 , 1 , 21 , 52 , 13 ), 'keywords' : [ 'Revolution' , 'Communism' ], 'phrases' : [ 'Revolutionary wars are inevitable in class society' , 'War is the continuation of politics' ], 'age' : 24 , } Serializing \u00b6 This could be serialized to JSON as: from stringcase import camelcase , snakecase from jetblack_serialization import SerializerConfig from jetblack_serialization.json import serialize text = serialize ( obj , Book , SerializerConfig ( camelcase , snakecase , pretty_print = True ) ) print ( text ) giving: { \"bookId\" : 42 , \"title\" : \"Little Red Book\" , \"author\" : \"Chairman Mao\" , \"publicationDate\" : \"1973-01-01T21:52:13.00Z\" , \"keywords\" : [ \"Revolution\" , \"Communism\" ], \"phrases\" : [ \"Revolutionary wars are inevitable in class society\" , \"War is the continuation of politics\" ], \"age\" : 24 , \"pages\" : null } Note the fields have been camel cased, and the publication date has been turned into an ISO 8601 date. Deserializing \u00b6 We can deserialize the data as follows: from stringcase import camelcase , snakecase from jetblack_serialization import SerializerConfig from jetblack_serialization.json import deserialize dct = deserialize ( text , Annotated [ Book , JSONValue ()], SerializerConfig ( camelcase , snakecase ) ) Attributes \u00b6 For JSON, attributes are typically not required. However JSONProperty(tag: str) and JSONValue() are provided for completeness.","title":"Serializing JSON"},{"location":"user-guide/json/#serializing-json","text":"Given a typed dictionary: from datetime import datetime from typing import List , Optional , TypedDict , Union class Book ( TypedDict , total = False ): book_id : int title : str author : str publication_date : datetime keywords : List [ str ] phrases : List [ str ] age : Optional [ Union [ datetime , int ]] pages : Optional [ int ] Create some data: obj : Book = { 'author' : 'Chairman Mao' , 'book_id' : 42 , 'title' : 'Little Red Book' , 'publication_date' : datetime ( 1973 , 1 , 1 , 21 , 52 , 13 ), 'keywords' : [ 'Revolution' , 'Communism' ], 'phrases' : [ 'Revolutionary wars are inevitable in class society' , 'War is the continuation of politics' ], 'age' : 24 , }","title":"Serializing JSON"},{"location":"user-guide/json/#serializing","text":"This could be serialized to JSON as: from stringcase import camelcase , snakecase from jetblack_serialization import SerializerConfig from jetblack_serialization.json import serialize text = serialize ( obj , Book , SerializerConfig ( camelcase , snakecase , pretty_print = True ) ) print ( text ) giving: { \"bookId\" : 42 , \"title\" : \"Little Red Book\" , \"author\" : \"Chairman Mao\" , \"publicationDate\" : \"1973-01-01T21:52:13.00Z\" , \"keywords\" : [ \"Revolution\" , \"Communism\" ], \"phrases\" : [ \"Revolutionary wars are inevitable in class society\" , \"War is the continuation of politics\" ], \"age\" : 24 , \"pages\" : null } Note the fields have been camel cased, and the publication date has been turned into an ISO 8601 date.","title":"Serializing"},{"location":"user-guide/json/#deserializing","text":"We can deserialize the data as follows: from stringcase import camelcase , snakecase from jetblack_serialization import SerializerConfig from jetblack_serialization.json import deserialize dct = deserialize ( text , Annotated [ Book , JSONValue ()], SerializerConfig ( camelcase , snakecase ) )","title":"Deserializing"},{"location":"user-guide/json/#attributes","text":"For JSON, attributes are typically not required. However JSONProperty(tag: str) and JSONValue() are provided for completeness.","title":"Attributes"},{"location":"user-guide/usage/","text":"Usage \u00b6 The package adds support for type annotations when serializing or deserializing JSON or XML. Serializing JSON Serializing XML","title":"Usage"},{"location":"user-guide/usage/#usage","text":"The package adds support for type annotations when serializing or deserializing JSON or XML. Serializing JSON Serializing XML","title":"Usage"},{"location":"user-guide/xml/","text":"Serializing XML \u00b6 The XML version of the typed dictionary might look like this: from datetime import datetime from typing import List , Optional , TypedDict , Union from typing_extensions import Annotated from jetblack_serialization.xml import XMLEntity , XMLAttribute class Book ( TypedDict , total = False ): book_id : Annotated [ int , XMLAttribute ( \"bookId\" )] title : str author : str publication_date : datetime keywords : Annotated [ List [ Annotated [ str , XMLEntity ( \"Keyword\" )]], XMLEntity ( \"Keywords\" )] phrases : List [ str ] age : Optional [ Union [ datetime , int ]] pages : Optional [ int ] Note we have introduced some annotations to control the serialization. For XML we have used pascal-case to serialized the keys and snake-case for deserialization. Create some data: book : Book = { 'author' : 'Chairman Mao' , 'book_id' : 42 , 'title' : 'Little Red Book' , 'publication_date' : datetime ( 1973 , 1 , 1 , 21 , 52 , 13 ), 'keywords' : [ 'Revolution' , 'Communism' ], 'phrases' : [ 'Revolutionary wars are inevitable in class society' , 'War is the continuation of politics' ], 'age' : 24 , 'pages' : None } Serializing \u00b6 To serialize we need to provide the containing tag Book : from stringcase import pascalcase , snakecase from jetblack_serialization import SerializerConfig from jetblack_serialization.xml import serialize text = serialize ( book , Annotated [ Book , XMLEntity ( \"Book\" )], SerializerConfig ( pascalcase , snakecase ) ) print ( text ) Producing: <Book bookId= \"42\" > <Title> Little Red Book </Title> <Author> Chairman Mao </Author> <PublicationDate> 1973-01-01T21:52:13.00Z </PublicationDate> <Keywords> <Keyword> Revolution </Keyword> <Keyword> Communism </Keyword> </Keywords> <Phrase> Revolutionary wars are inevitable in class society </Phrase> <Phrase> War is the continuation of politics </Phrase> <Age> 24 </Age> </Book> ' The annotations are more elaborate here. However, much of the typed dictionary requires no annotation. First we needed the outer document wrapper XMLEntity(\"Book\") . Next we annotated the book_id to be an XMLAttribute . Finally we annotated the two lists differently. The keywords list used a nested structure, which we indicated by giving the list a different XMLEntity tag to the list items. For the phrases we used the default in-line behaviour. Deserializing \u00b6 We can deserialize the XML as follows: from stringcase import pascalcase , snakecase from jetblack_serialization import SerializerConfig from jetblack_serialization.xml import deserialize dct = deserialize ( text , Annotated [ Book , XMLEntity ( \"Book\" )], SerializerConfig ( pascalcase , snakecase ) )","title":"Serializing XML"},{"location":"user-guide/xml/#serializing-xml","text":"The XML version of the typed dictionary might look like this: from datetime import datetime from typing import List , Optional , TypedDict , Union from typing_extensions import Annotated from jetblack_serialization.xml import XMLEntity , XMLAttribute class Book ( TypedDict , total = False ): book_id : Annotated [ int , XMLAttribute ( \"bookId\" )] title : str author : str publication_date : datetime keywords : Annotated [ List [ Annotated [ str , XMLEntity ( \"Keyword\" )]], XMLEntity ( \"Keywords\" )] phrases : List [ str ] age : Optional [ Union [ datetime , int ]] pages : Optional [ int ] Note we have introduced some annotations to control the serialization. For XML we have used pascal-case to serialized the keys and snake-case for deserialization. Create some data: book : Book = { 'author' : 'Chairman Mao' , 'book_id' : 42 , 'title' : 'Little Red Book' , 'publication_date' : datetime ( 1973 , 1 , 1 , 21 , 52 , 13 ), 'keywords' : [ 'Revolution' , 'Communism' ], 'phrases' : [ 'Revolutionary wars are inevitable in class society' , 'War is the continuation of politics' ], 'age' : 24 , 'pages' : None }","title":"Serializing XML"},{"location":"user-guide/xml/#serializing","text":"To serialize we need to provide the containing tag Book : from stringcase import pascalcase , snakecase from jetblack_serialization import SerializerConfig from jetblack_serialization.xml import serialize text = serialize ( book , Annotated [ Book , XMLEntity ( \"Book\" )], SerializerConfig ( pascalcase , snakecase ) ) print ( text ) Producing: <Book bookId= \"42\" > <Title> Little Red Book </Title> <Author> Chairman Mao </Author> <PublicationDate> 1973-01-01T21:52:13.00Z </PublicationDate> <Keywords> <Keyword> Revolution </Keyword> <Keyword> Communism </Keyword> </Keywords> <Phrase> Revolutionary wars are inevitable in class society </Phrase> <Phrase> War is the continuation of politics </Phrase> <Age> 24 </Age> </Book> ' The annotations are more elaborate here. However, much of the typed dictionary requires no annotation. First we needed the outer document wrapper XMLEntity(\"Book\") . Next we annotated the book_id to be an XMLAttribute . Finally we annotated the two lists differently. The keywords list used a nested structure, which we indicated by giving the list a different XMLEntity tag to the list items. For the phrases we used the default in-line behaviour.","title":"Serializing"},{"location":"user-guide/xml/#deserializing","text":"We can deserialize the XML as follows: from stringcase import pascalcase , snakecase from jetblack_serialization import SerializerConfig from jetblack_serialization.xml import deserialize dct = deserialize ( text , Annotated [ Book , XMLEntity ( \"Book\" )], SerializerConfig ( pascalcase , snakecase ) )","title":"Deserializing"}]}